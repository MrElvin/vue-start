#! /usr/bin/env node
const pack = require('commander')
const path = require('path')
const pkg = require('../package.json')
const handlerBuild = require('./handlerBuild')
const handlerDev = require('./handlerDev')

// 配置项目的文件 build 目录和源代码编写目录
// 默认的静态文件目录名为 static，如果需要更改该文件夹名称，需要改变 webpack 配置（copyWebpackPlugin）
const projectDir = {
  dist: path.join(__dirname, '..', 'dist'),
  src: path.join(__dirname, '..', 'src'),
  root: path.join(__dirname, '..')
}

pack
  .version(pkg.version, '-v, --version')

// 热加载命令，默认入口：src 下的 main.js 文件
pack
  .command('hot')
  .description('start webpack-dev-serve in hot-reload mode')
  .option('-p, --port [port]', 'specify listening port')
  .option('-f, --file [file]', 'specify entry file or directory')
  .option('-d, --domain [domain]', 'specify domin')
  .action((cmd) => handlerDev.hot({ file: cmd.file ? cmd.file : 'main.js', ...projectDir, env: 'development', port: cmd.port ? cmd.port : 8080, type: 'hot', domain: cmd.domain ? cmd.domain : 'localhost' }))

// live-reload 加载命令，默认入口：src 下的 main.js 文件
pack
  .command('live')
  .description('start webpack-dev-serve in live-reload mode')
  .option('-p, --port [port]', 'specify listening port')
  .option('-f, --file [file]', 'specify entry file or directory')
  .option('-d, --domain [domain]', 'specify domin')
  .action((cmd) => handlerDev.live({ file: cmd.file ? cmd.file : 'main.js', ...projectDir, env: 'development', port: cmd.port ? cmd.port : 8080, type: 'live', domain: cmd.domain ? cmd.domain : 'localhost' }))

// 打包命令，默认入口：src 下的 main.js 文件（只提供了生产打包）
pack
  .command('build')
  .description('execute webpack build (default entry: all .js files in src/)')
  .option('-f, --file [file]', 'specify entry file or directory')
  .action((cmd) => handlerBuild.build({ file: cmd.file ? cmd.file : 'main.js', ...projectDir, env: 'production' }))
  .on('--help', () => {
    console.log(`
  Examples:

    build index.js production
    `)
  })

// 监听打包命令，默认入口：src 下的 main.js 文件（只提供了生产打包）
pack
  .command('watch')
  .description('execute webpack build and watch files')
  .option('-f, --file [file]', 'specify entry file or directory')
  .action((cmd) => handlerBuild.watch({ file: cmd.file ? cmd.file : 'main.js', ...projectDir, env: 'production' }))
  .on('--help', () => {
    console.log(`
  Examples:

    watch index.js production
    `)
  })
pack.parse(process.argv)
